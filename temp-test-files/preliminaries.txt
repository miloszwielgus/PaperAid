2. Preliminary notionsIn this section, we give some preliminary notions regarding variables, trajectories, mappings, and continuous functions.The purpose of the section is to recall concepts that are already well known from the literature as well as to fix the notationfor the rest of the paper.2.1. VariablesWe define a countable universal set V of variables, where every variable v âˆˆ V has a type Type(v) that defines thedomain over which the variable ranges. Elementary types include booleans, integers and reals. A type is discrete if it has adecidable equality, that is, if the equality of two values can be decided in finite time and using a finite amount of data.The booleans and integers are discrete types, but the reals are not, since deciding equality of two real numbers may requirechecking an infinite number of digits. Given a set of variables V âŠ† V , a valuation over V is a function that associates everyvariable in V with a value in its type. We often refer to valuations as states, and we denote them by x, y, z, . . .. We denote byVal(X) the set of all valuations over X . If X, Y âŠ‚ V satisfy X âˆ© Y = âˆ…, then Val(X âˆª Y ) = Val(X) Ã— Val(Y ). Given a valuationx âˆˆ Val(X) and a subset of variables Y âŠ† X , we denote the restriction of x to Y by x|Y or Ï€Y (x). For notational conveniencewe often write x|Y even when Y âŠ† X as a shortcut for x|Y âˆ©X . The restriction operator is extended to sets of valuations inthe usual way.We abuse of notation and, when clear from the context, we implicitly use blackboard-bold letters to refer to sets ofvaluations, such as X for Val(X). We also implicitly use lowercase bold letters to denote a valuation over the correspondinguppercase set of variables. Thus, for instance, we use x to denote a valuation over X and u to denote a valuation over U .Also, we use tuple notation like (u, x) to denote a valuation over U âˆª X when U and X are disjoint.Given two valuations x âˆˆ Val(X) and y âˆˆ Val(Y ), we say that x and y are compatible on a set of variables Z âŠ‚ X âˆ© Yif x|Z = y|Z . This means essentially that x and y associate the same values to all the variables of Z . Compatibility plays acrucial role in parallel composition.Given sets of variables U1,2 and Y1,2 and relations 1,2 with i âŠ‚ U i Ã— Y i for i = 1, 2, their union 1 âˆª 2 is a relationon (U1 âˆª U2) Ã— (Y1 âˆª Y2). The transitive closure of a relation âŠ‚ U Ã— Y , denoted +, is the intersection of all transitiverelations of which is a subset.2.2. TrajectoriesThroughout the paper we fix the time axis to be the set of non-negative real numbers R+. An interval I is any convexsubset of R+. Examples of intervals are [t1, t2] = {t âˆˆ R+ : t1  t  t2}, which is closed, [t1, t2) = {t âˆˆ R+ : t1  t < t2},which is left-closed and right-open, and [t1, âˆž) = {t âˆˆ R+ : t1  t}, which spans to infinity. For any interval I and t âˆˆ R+,we define I + t as the interval {tâ€² + t : tâ€² âˆˆ I}.A trajectory over a set of variables V is a function Î¶ : I â†’ Val(V ), where I is a left-closed interval with left endpointequal to 0. The interval I is the domain of Î¶ and is denoted by dom(Î¶ ). With time lim(Î¶ ) (the limit time of Î¶ ) we denote thesupremum of dom(Î¶ ). We say that Î¶ is closed if dom(Î¶ ) is a closed interval. If Î¶ is closed, we also write time last(Î¶ ) (thelast time of Î¶ ) for the maximum of dom(Î¶ ). The first value of a trajectory is defined as val first(Î¶ ) def= Î¶(0), while, when Î¶ isclosed, the last value of Î¶ is defined as val last(Î¶ ) def= Î¶(time last(Î¶ )). We say that a trajectory is continuous if it is a continuousfunction. We denote by Trajs(V ) the set of all trajectories over V , and by CTrajs(V ) the set of all continuous trajectoriesover V . Given a subset W âŠ† V , the restriction of Î¶ to W , denoted by Î¶ |W , is defined as the trajectory Î¶ â€² : dom(Î¶ ) â†’ Val(W )such that Î¶ â€²(t) = Î¶(t)|W for every t âˆˆ dom(Î¶ ). With a little abuse of notation, if [t1, t2] is a closed subinterval of dom(Î¶ ),we denote by Î¶ | [t1 ,t2 ] the trajectory Î¶ â€² such that dom(Î¶ â€²) = [0, t2 âˆ’ t1] and Î¶ â€²(t) = Î¶(t + t1) for every t âˆˆ dom(Î¶ â€²). Similarly4D. Bresolin, P. Collins, L. Geretti et al. Information and Computation 300 (2024) 105189we use the notation Î¶ | [t1 ,t2 ) for an open interval [t1, t2), where the domain of Î¶ â€² is replaced by [0, t2 âˆ’ t1). The restrictionoperators are extended to sets of trajectories in the usual way.A trajectory Î¶ â€² is a prefix of another trajectory Î¶ , and Î¶ is an extension of Î¶ â€², denoted by Î¶ â€²  Î¶ , if dom(Î¶ â€²) âŠ† dom(Î¶ )and Î¶ â€²(t) = Î¶(t) for every t âˆˆ dom(Î¶ â€²). Given two trajectories Î¶1 and Î¶2 such that val last(Î¶1) = valfirst(Î¶2), their concatenationÎ¶1 Â· Î¶2 is the trajectory with domain dom(Î¶1) âˆª (dom(Î¶2) + time last(Î¶1)) such that Î¶1 Â· Î¶2(t) = Î¶1(t) if t âˆˆ dom(Î¶1), andÎ¶1 Â· Î¶2(t) = Î¶2(t âˆ’ time last(Î¶1)) otherwise. We say that Î¶ â€² is a suffix of Î¶ , denoted by Î¶ â€²  Î¶ , if there exists Î¶ â€²â€²  Î¶ such thatÎ¶ = Î¶ â€²â€² Â· Î¶ â€². Observe that Î¶1  Î¶1 Â· Î¶2 and Î¶2  Î¶1 Â· Î¶2 . We extend the concatenation operation to countable sequences oftrajectories in the usual way.We introduce two extra operators to extract prefixes and suffixes from trajectories. For a trajectory Î¶ and a time t wedenote by Î¶  t the prefix of Î¶ up to time t included, that is Î¶[0,t] if t âˆˆ dom(Î¶ ), and Î¶ otherwise. If t âˆˆ dom(Î¶ ), then wedenote by Î¶  t the trajectory Î¶[t,timelast (Î¶ )] (Î¶[t,timelast (Î¶ )) if the domain of Î¶ is right-open), that is the suffix of Î¶ from timet. Similarly, if Î¶ â€² is a closed prefix of Î¶ , we denote by Î¶  Î¶ â€² the suffix Î¶  time last(Î¶ â€²). We extend the operators to sets oftrajectories as usual.Given two trajectories Î¶1 âˆˆ Trajs(V 1) and Î¶2 âˆˆ Trajs(V 2), with V 1 âˆ© V 2 = âˆ…, we define the union (Î¶1, Î¶2) of Î¶1 and Î¶2 to bethe trajectory Î¶ âˆˆ Trajs(V 1 âˆª V 2) with domain dom(Î¶ ) = dom(Î¶1) âˆ© dom(Î¶2) such that, for each t âˆˆ dom(Î¶ ), Î¶(t)|V 1 = Î¶1(t)and Î¶(t)|V 2 = Î¶2(t). It should be noted that the domains of Î¶1 and Î¶2 are not required to be the same. Then the domainof the union trajectory is the intersection of the domains of the input trajectories, that is, the smaller domain. A samplescenario where such a general definition is needed is when we let two dynamic systems interact and one of the two divergesin finite time given the input provided by the other one. The definition of union could be extended also to trajectories thathave some variables in common provided that they agree on their common variables. We do not need such a definitionin the context of this paper, though something similar is achieved by the notion of composition of trajectories that weintroduce later.2.3. Sets and multifunctionsWe now concentrate on multifunctions, the definition of the dependent product, and the concept of composition. Sincewe need to use these concepts with valuations, trajectories, and later with discrete transitions and hybrid trajectories, westate the results in terms of generic spaces, that for us are essentially sets of objects for which some notion of projection isdefined. To be helped by our intuition, we may think of objects as valuations and projections as restrictions. The conceptsintroduced in this section are abstractions of typical constructions that deal with parallel composition of discrete systems.These extensions will allow us to work smoothly with continuous dynamics.A multifunction (multimap) is a generalization of the notion of function (map) where the image of a point is a set ofpoints rather than a single point. The definition of multifunction composition is then straightforward.Definition 2.1 (Multifunction). Let U, Y be spaces. A multifunction or multimap from U to Y is a function F : U â†’ P(Y ).We write F : U â‡’ Y if F : U â†’ P(Y ).If F : U â‡’ Y and A âŠ‚ U , then we define F (A) := â‹ƒuâˆˆA F (u). If F : U â‡’ Y and G : Y â‡’ Z, then the compositionG â—¦ F : U â‡’ Z is defined as [G â—¦ F ](u) := G(F (u)).We generalize fixed-points as well. A fixed-point of a function f is a point x such that f (x) = x. In case of a multimapF we simply require that x is in the image F (x). Whenever systems have feedback loops, their dynamics are expressed byfunctions for which some variables are at the same time input (they appear in the domain of the function) and output (theyappear in the codomain of the function). For instance, in many cases we have functions of the kind g : U Ã— X â†’ X Ã— Ywhere U represents the input variables, Y represents the output variables, and X represents some internal state variables.If function g is meant to represent a relationship between input and output at certain points in time, then, given an inputvalue, it is reasonable to consider state values that are not changed by g, as no variable may have two distinct values at thesame time. The result of this operation is known as a fixed-point of g, and is defined by [FixX(g)](u) = {(x, y) âˆˆ X Ã— Y |g(u, x) = (x, y)}. We generalize the construction to multimaps by replacing equality with inclusion.Definition 2.2 (Fixed-point). Given F : X â‡’ X, we say x âˆˆ X is a fixed-point of F if x âˆˆ F (x).Given G : U Ã— X â‡’ X Ã— Y we define the fixed-point operator FixX with FixX(G) : U â‡’ X Ã— Y by[FixX(G)](u) = {(x, y) âˆˆ X Ã— Y | G(u, x)  (x, y)}.Observe that there is a strict correlation between multifunctions U â‡’ Y and subsets of U Ã— Y . Indeed, we can definethe graph of a multifunction F : U â‡’ Y , denoted by graph(F ), to be the set {(u, y) | y âˆˆ F (u)}, and the multifunction decom-position of a set S âŠ‚ U Ã— Y to be the multifunction F : U â‡’ Y such that F (u) = {y | (u, y) âˆˆ S}. It is immediate to observethat one operation is the inverse of the other.Given spaces with appropriate projections it is possible to define the notion of parallel composition for multifunctionsas well as for sets so that the two definitions coincide up to transformations from multifunctions to sets and vice versa.5D. Bresolin, P. Collins, L. Geretti et al. Information and Computation 300 (2024) 105189The definition for sets (Definition 2.3) is the typical definition we see in the literature, while the definition for mul-tifunctions (Definition 2.4) is proposed here and shown to be equivalent to the previous one in Proposition 2.5, since itsuse is more natural when dealing with continuous dynamics. What is important is that the two notations can be usedinterchangeably, and therefore in the rest of the paper we will use the most appropriate notation in each place.Definition 2.3 (Parallel composition of sets). Let S1 âŠ† U1 Ã— Y1 and S2 âŠ† U2 Ã— Y2 . Let Y = Y1 Ã— Y2 , and suppose U is suchthat there are canonical projections Ï€1 : U Ã— Y2 â†’ U1 and Ï€2 : U Ã— Y1 â†’ U2 . Then the parallel composition of S1 and S2 ,denoted S1â€–U S2 , is the subset of U Ã— Y given byS1â€–U S2 = {(u, y1, y2) âˆˆ U Ã— Y1 Ã— Y2 | (Ï€1(u, y2), y1) âˆˆ S1 âˆ§ (Ï€2(u, y1), y2) âˆˆ S2}.Definition 2.4 (Parallel composition of multifunctions). Let G1 : U1 â‡’ Y1 and G2 : U2 â‡’ Y2 . Let Y = Y1 Ã— Y2 , and suppose Uis such that there are canonical projections Ï€1 : U Ã— Y2 â†’ U1 and Ï€2 : U Ã— Y1 â†’ U2 . Then the parallel composition of G1and G2 , denoted G1â€–U G2 , is the multifunction U â‡’ Y given by[G1â€–U G2](u) = {(y1, y2) âˆˆ Y1 Ã— Y2 | y1 âˆˆ G1(Ï€1(u, y2)) âˆ§ y2 âˆˆ G2(Ï€2(u, y1))}.When clear from the context we omit the space U from the parallel composition operators.